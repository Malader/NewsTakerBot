from Database.Database import Database

from Repositories.IUserSubscriptionRepository import IUserSubscriptionRepository


class UserSubscriptionManager:
    def __init__(self, subscription_repository: IUserSubscriptionRepository):
        self.subscription_repository = subscription_repository
        self.default_channels = {"@vestiru24", "@rian_ru", "@SVO_ZOV_22", "@tsargradtv"}
        self.theme_emojis = {
            '–°–ø–æ—Ä—Ç': 'üèÄ',
            '–ü–æ–ª–∏—Ç–∏–∫–∞': 'üèõÔ∏è',
            '–°–í–û': '‚öîÔ∏è',
            '–≠–∫–æ–Ω–æ–º–∏–∫–∞': 'üíπ',
            '–ù–∞—É–∫–∞': 'üî¨',
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'üíª',
            '–ö—É–ª—å—Ç—É—Ä–∞': 'üé®',
            '–ó–¥–æ—Ä–æ–≤—å–µ': 'üíä',
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üéì'
        }

    def add_subscription(self, user_id, channel):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_subscriptions = set(self.subscription_repository.get_user_channels(user_id))
        if channel not in user_subscriptions:
            user_subscriptions.add(channel)
            self.subscription_repository.add_user_channels(user_id, list(user_subscriptions))

    def remove_subscription(self, user_id, channel):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_subscriptions = set(self.subscription_repository.get_user_channels(user_id))
        if channel in user_subscriptions:
            user_subscriptions.discard(channel)
            if user_subscriptions:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                self.subscription_repository.add_user_channels(user_id, list(user_subscriptions))
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
                self.subscription_repository.remove_user_channels(user_id)

    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return set(self.subscription_repository.get_user_channels(user_id))

    def initialize_user_subscriptions(self, user_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        existing_subscriptions = set(self.subscription_repository.get_user_channels(user_id))
        if not existing_subscriptions:
            self.subscription_repository.add_user_channels(user_id, list(self.default_channels))
        return set(self.subscription_repository.get_user_channels(user_id))

    def add_user_interest(self, user_id, interest):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        current_interests = self.subscription_repository.get_user_interests(user_id)
        if interest not in current_interests:
            current_interests.append(interest)
            self.subscription_repository.add_user_interests(user_id, current_interests)

    def remove_user_interest(self, user_id, interest):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        current_interests = self.subscription_repository.get_user_interests(user_id)
        if interest in current_interests:
            current_interests.remove(interest)
            self.subscription_repository.add_user_interests(user_id, current_interests)

    def clear_user_interests(self, user_id):
        """–û—á–∏—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.subscription_repository.clear_user_interests(user_id)

    def get_user_interests(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.subscription_repository.get_user_interests(user_id)

    def set_user_subscriptions(self, user_id, new_subscriptions):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.subscription_repository.add_user_channels(user_id, list(new_subscriptions))


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UserInterestManager —Å Database
db_file = 'tgbotdatabase.sqlite'
database = Database(db_file)
user_subscription_manager = UserSubscriptionManager(database)
