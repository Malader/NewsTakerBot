from collections import defaultdict

import telethon
from telethon import events, Button
from telethon.tl.types import Channel

# import subscription_manager
from NewsFetcher import NewsFetcher
# from text_processor import TextProcessor
# from subscription_manager import SubscriptionManager


class MessageHandler:
    def __init__(self, user_client, bot_client, subscription_manager_instance, button_manager_instance, text_processor):
        self.user_client = user_client
        self.bot_client = bot_client
        self.subscription_manager = subscription_manager_instance
        self.button_manager = button_manager_instance
        self.text_processor = text_processor
        self.news_fetcher = NewsFetcher(user_client, text_processor, subscription_manager_instance, self)

    async def subscribe_all(self, event):
        user_id = event.sender_id
        all_interests = ['–°–ø–æ—Ä—Ç', '–ü–æ–ª–∏—Ç–∏–∫–∞', '–°–í–û', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–ù–∞—É–∫–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ö—É–ª—å—Ç—É—Ä–∞', '–ó–¥–æ—Ä–æ–≤—å–µ',
                         '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']

        self.subscription_manager.initialize_user_interests(user_id)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ —Ç–µ–º—ã
        self.subscription_manager.add_interests(user_id, all_interests)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await event.edit('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ —Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mysubscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏.')
        except telethon.errors.rpcerrorlist.MessageNotModifiedError:
            # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await event.answer('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —Ç–µ–º—ã.', alert=True)

    def ensure_user_subscriptions_initialized(self, user_id):
        if user_id not in self.subscription_manager.user_subscriptions:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            self.subscription_manager.user_subscriptions[user_id] = self.subscription_manager.default_channels.copy()
        elif not self.subscription_manager.user_subscriptions[user_id]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
            pass

    def register_handlers(self):
        @self.bot_client.on(events.NewMessage(pattern='/start'))
        async def start(event):
            user_id = event.sender_id
            self.subscription_manager.initialize_user_subscriptions(user_id)
            # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            welcome_message = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
                "üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤.\n"
                "üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–∞.\n"
                "üì¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Ç–µ–º—ã.\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/news - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
                "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                "/mysubscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "/addchannel - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª\n"
                "/removechannel - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª\n"
                "/mychannels - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—É –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Ç–µ–º–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç!\n\n"
                "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –±–æ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /mychannels\n"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await event.respond(welcome_message)
            pass

        @self.bot_client.on(events.NewMessage(pattern='/news'))
        async def news(event):
            user_id = event.sender_id
            self.ensure_user_subscriptions_initialized(user_id)
            self.subscription_manager.initialize_user_subscriptions(user_id)
            user_added_channels = self.subscription_manager.get_user_subscriptions(user_id)
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã —Å –±–∞–∑–æ–≤—ã–º–∏
            all_subscribed_channels = user_added_channels

            if not all_subscribed_channels:
                await event.respond(
                    "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchannel –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–º –∫–∞–Ω–∞–ª—ã.")
                return

            interests = self.subscription_manager.get_user_interests(user_id)
            if not interests:
                buttons = [
                    [Button.inline("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º", "show_all_news")],
                    [Button.inline("–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", "subscribe")]
                ]
                await event.respond("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", buttons=buttons)
                return

            unique_messages = await self.news_fetcher.fetch_telegram_channel_messages(user_id)
            print(f"Fetched {len(unique_messages)} unique messages")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

            filtered_messages = self.text_processor.filter_messages_by_interest(unique_messages, interests)
            print(f"Filtered down to {len(filtered_messages)} messages after applying user interests")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(filtered_messages) == 0:
                await event.respond('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º —Å–µ–π—á–∞—Å –Ω–µ—Ç.')
                return

            for message in filtered_messages:
                try:
                    if message.media:
                        await self.bot_client.forward_messages(entity=user_id, messages=message.id, from_peer=message.chat_id)
                    else:
                        await self.bot_client.send_message(user_id, message.text)
                except Exception as e:
                    print(f"Error sending message: {e}")

            pass

        @self.bot_client.on(events.NewMessage(pattern='/subscribe'))
        async def subscribe(event):
            user_id = event.sender_id
            buttons = self.button_manager.create_subscription_buttons(user_id)

            if not buttons:
                await event.respond(
                    '–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–º –Ω–µ—Ç, –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ —Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mysubscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏.')
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
                # buttons.append([Button.inline("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", "finish_subscription")])
                await event.respond('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', buttons=buttons)

            pass

        @self.bot_client.on(events.CallbackQuery(data=b'subscribe_all'))
        async def handle_subscribe_all(event):
            await self.subscribe_all(event)
            pass

        @self.bot_client.on(events.NewMessage(pattern='/mysubscriptions'))
        async def my_subscriptions(event):
            user_id = event.sender_id
            subscriptions = self.subscription_manager.get_user_interests(user_id)
            all_interests = ['–°–ø–æ—Ä—Ç', '–ü–æ–ª–∏—Ç–∏–∫–∞', '–°–í–û', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–ù–∞—É–∫–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ö—É–ª—å—Ç—É—Ä–∞', '–ó–¥–æ—Ä–æ–≤—å–µ',
                             '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']

            if subscriptions:
                buttons = [
                    [Button.inline(f"{self.subscription_manager.theme_emojis.get(interest, '')} –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {interest}",
                                   f"unsubscribe_{interest}")] for
                    interest in subscriptions]

                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ–º"
                buttons.append([Button.inline("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ–º", "unsubscribe")])

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–µ –Ω–∞ –≤—Å–µ —Ç–µ–º—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã"
                if len(subscriptions) < len(all_interests):
                    buttons.append([Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã", "add_interests")])

                await event.respond('–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã:', buttons=buttons)
            else:
                await event.respond('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.')
            pass

        @self.bot_client.on(events.NewMessage(pattern='/help'))
        async def help_command(event):
            user_id = event.sender_id
            help_message = (
                "üÜò –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ üÜò\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @Malader –∏–ª–∏ —Å @adamishhe.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–º–æ—â–∏
            await event.respond(help_message)
            pass

        @self.bot_client.on(events.CallbackQuery(pattern=r'^unsubscribe_(.+)$'))
        async def unsubscribe_interest(event):
            user_id = event.sender_id
            interest_to_unsubscribe = event.pattern_match.group(1)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            current_subscriptions = self.subscription_manager.get_user_interests(user_id)
            buttons = [
                [Button.inline(f"{self.subscription_manager.theme_emojis.get(interest, '')} –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {interest}", f"unsubscribe_{interest}")]
                for interest in current_subscriptions]

            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ–º"
            buttons.append([Button.inline("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ–º", "unsubscribe")])

            if current_subscriptions:
                buttons.append([Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã", "add_interests")])



            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã:' if current_subscriptions else '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'

            try:
                await event.edit(message_text, buttons=buttons)
            except telethon.errors.rpcerrorlist.MessageNotModifiedError:
                # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await event.answer('–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.', alert=True)
            await event.answer(f'–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã "{interest_to_unsubscribe}".', alert=True)

        @self.bot_client.on(events.CallbackQuery(data=b'add_interests'))
        async def add_interests(event):
            user_id = event.sender_id
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–µ–º—ã
            buttons = self.button_manager.create_subscription_buttons(user_id)

            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await event.edit('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', buttons=buttons)
            except telethon.errors.rpcerrorlist.MessageNotModifiedError:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await event.answer('–°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.', alert=True)

            pass

        # –ú–µ—Å—Ç–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –í –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        user_channels = defaultdict(list)

        @self.bot_client.on(events.NewMessage(pattern='/addchannel(?: (.*))?'))
        async def add_channel(event):
            user_id = event.sender_id
            channel_to_add = event.pattern_match.group(1)

            if not channel_to_add:
                await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /addchannel @channelname")
                return

            try:
                channel_entity = await self.bot_client.get_entity(channel_to_add)
                if isinstance(channel_entity, Channel):
                    user_subscriptions = self.subscription_manager.get_user_subscriptions(user_id)

                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
                    for base_channel in self.subscription_manager.default_channels:
                        user_subscriptions.add(base_channel)

                    if channel_to_add in user_subscriptions:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
                        await event.respond(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_to_add}.")
                        return

                    user_subscriptions.add(channel_to_add)
                    self.subscription_manager.set_user_subscriptions(user_id, user_subscriptions)
                    await event.respond(f"–ö–∞–Ω–∞–ª {channel_to_add} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫.")
                else:
                    await event.respond(f"{channel_to_add} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º.")
            except Exception as e:
                await event.respond(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel_to_add}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        @self.bot_client.on(events.NewMessage(pattern='/mychannels'))
        async def my_channels(event):
            user_id = event.sender_id
            if user_id not in self.subscription_manager.user_subscriptions:
                self.subscription_manager.user_subscriptions[user_id] = self.subscription_manager.default_channels.copy()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            subscribed_channels = self.subscription_manager.user_subscriptions[user_id]

            if subscribed_channels:
                buttons = [[Button.inline(f"–£–¥–∞–ª–∏—Ç—å {channel}", f"removechannel_{channel.replace('@', '')}")] for
                           channel in
                           sorted(subscribed_channels)]
                channels_list = '\n'.join(sorted(subscribed_channels))
                await event.respond(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n{channels_list}", buttons=buttons)
            else:
                await event.respond("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
            pass

        @self.bot_client.on(events.CallbackQuery(pattern=r'^removechannel_(.+)$'))
        async def remove_channel_callback(event):
            user_id = event.sender_id
            channel_to_remove = '@' + event.pattern_match.group(1).decode('utf-8') if isinstance(
                event.pattern_match.group(1), bytes) else event.pattern_match.group(1)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_subscriptions = self.subscription_manager.get_user_subscriptions(user_id)

            if channel_to_remove in user_subscriptions:
                # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
                user_subscriptions.discard(channel_to_remove)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.subscription_manager.set_user_subscriptions(user_id, user_subscriptions)
                if user_subscriptions:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                    buttons = [[Button.inline(f"–£–¥–∞–ª–∏—Ç—å {channel}", f"removechannel_{channel.replace('@', '')}")] for
                            channel in sorted(user_subscriptions)]
                    # await event.answer(f"–ö–∞–Ω–∞–ª {channel_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", alert=True)

                    message_text = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n{', '.join(sorted(user_subscriptions))}" if user_subscriptions else "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª."
                    await event.edit(message_text, buttons=buttons)
                else:
                    await event.edit("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
            else:
                await event.answer(f"–ö–∞–Ω–∞–ª {channel_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.", alert=True)

        @self.bot_client.on(events.CallbackQuery(pattern='^obsolete_button$'))
        async def obsolete_button_handler(event):
            # –ü–æ—Å—ã–ª–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è "–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞".
            await event.answer()

        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ CallbackQuery
        @self.bot_client.on(events.CallbackQuery())
        async def catch_all_callback_queries(event):
            callback_data = event.data.decode('utf-8')
            print(f"–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å: {callback_data}")

            # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback data, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ handlers
            known_callbacks = [
                'unsubscribe_',
                'show_all_news',
                'finish_subscription',
                'subscribe_all',
                'removechannel_',
                'subscribe',
                'add_interests',
                'unsubscribe'
            ]

            if any(callback_data.startswith(known) for known in known_callbacks):
                print("–≠—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º handler.")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
                await event.answer()

