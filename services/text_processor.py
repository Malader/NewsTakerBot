from sentence_transformers import SentenceTransformer, util
import numpy as np
import re


class TextProcessor:
    def __init__(self):
        self.model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
        self.interest_keywords = {
            'Спорт': [
                'чемпионат', 'футбол', 'хоккей', 'Олимпиада', 'баскетбол', 'теннис', 'спартакиада',
                'соревнования', 'матч', 'турнир', 'полуфинал', 'финал', 'евролига', 'квалификация',
                'первенство', 'атлетика', 'биатлон', 'гимнастика', 'допинг', 'велоспорт', 'формула-1',
                'гран-при', 'сборная', 'тренер', 'плавание', 'чемпион', 'медаль', 'рекорд', 'стадион',
                'спортивные игры', 'фигурное катание', 'бокс', 'ММА', 'профессиональный спорт', 'аматорский спорт',
                'спортивная медицина', 'физкультура', 'спортивное питание', 'спортивная экипировка', 'дзюдо', 'карате',
                'гольф', 'легкая атлетика', 'спортивная гимнастика', 'фитнес', 'бодибилдинг', 'армрестлинг',
                'скейтбординг'
            ],
            'Политика': [
                'выборы', 'дебаты', 'парламент', 'законодательство', 'госдума', 'санкции', 'митинг',
                'протесты', 'реформа', 'голосование', 'конгресс', 'сессия', 'законопроект', 'партия',
                'оппозиция', 'политический кризис', 'дипломатия', 'переговоры', 'государство', 'президент',
                'министр', 'внешняя политика', 'внутренняя политика', 'международные отношения', 'политические реформы',
                'лоббирование', 'избирательный участок', 'голос', 'политтехнологии', 'политическая партия',
                'политическая кампания',
                'государственное управление', 'муниципальное управление', 'гражданская активность',
                'политическая стратегия',
                'политический анализ', 'государственная служба', 'политическое движение', 'политический диалог',
                'публичная политика'
            ],
            'СВО': [
                'специальная военная операция', 'Донбасс', 'ЛДНР', 'боевые действия', 'войска', 'оборона',
                'наступление', 'обстрел', 'переговоры', 'противостояние', 'блокпост', 'зона конфликта',
                'миротворцы', 'операция', 'военный конфликт', 'примирение', 'военнопленные', 'армия', 'флот',
                'военная техника', 'военные учения', 'стратегия', 'тактика', 'командование', 'военная доктрина',
                'пропаганда', 'военная разведка', 'гибридная война', 'военный бюджет', 'оборонный заказ', 'патриотизм',
                'военно-промышленный комплекс', 'военное строительство', 'военная служба', 'военная мощь',
                'военно-морской флот',
                'воздушно-космические силы', 'десантные войска', 'военная медицина', 'военное образование',
                'военная безопасность'
            ],
            'Экономика': [
                'центробанк', 'инфляция', 'фондовый рынок', 'курс валют', 'экономический кризис', 'бюджет',
                'финансирование', 'инвестиции', 'акции', 'рецессия', 'дефицит', 'ВВП', 'доходы', 'расходы',
                'финансовый рынок', 'налогообложение', 'макроэкономика', 'биржа', 'дивиденды', 'ипотека',
                'кредитование', 'валютный резерв', 'национальная валюта', 'государственный долг', 'банковская система',
                'финансовая стабильность', 'денежная масса', 'денежно-кредитная политика', 'финансовый контроль',
                'биржевые индексы',
                'товарный рынок', 'рыночная экономика', 'монетарная политика', 'инвестиционный климат',
                'экономическое развитие',
                'предпринимательство', 'стартап', 'бизнес-план', 'коммерция', 'торговля', 'экономический форум'
            ],
            'Наука': [
                'исследование', 'открытие', 'космос', 'Нобелевская премия', 'эксперимент', 'лаборатория',
                'научная работа', 'публикация', 'конференция', 'семинар', 'доклад', 'статья', 'теория',
                'гипотеза', 'патент', 'изобретение', 'научный прорыв', 'исследовательский проект', 'физика',
                'химия', 'биология', 'астрономия', 'генетика', 'нанотехнологии', 'математика', 'квантовая физика',
                'молекулярная биология', 'экология', 'биотехнологии', 'робототехника', 'искусственный интеллект',
                'компьютерные науки', 'астрофизика', 'палеонтология', 'геология', 'метеорология', 'фармакология',
                'нейронаука', 'психология', 'социология', 'антропология', 'этология', 'лингвистика', 'кибернетика'
            ],
            'Технологии': [
                'искусственный интеллект', 'blockchain', 'гаджеты', 'компьютерные игры', 'программирование',
                'большие данные', 'дата-центры', 'облачные технологии', 'кибербезопасность', 'интернет вещей',
                'виртуальная реальность', 'дополненная реальность', 'смарт-технологии', '5G',
                'автономные транспортные средства',
                'умный дом', 'интернет-платформы', 'мобильные приложения', 'веб-разработка', 'фронтенд', 'бэкенд',
                'машинное обучение', 'нейросети', 'компьютерное зрение', 'алгоритмы', 'квантовые технологии',
                'нанотехнологии',
                'гаджеты', 'носимая электроника', 'смарт-часы', 'дроны', 'робототехника', '3D печать',
                'цифровая трансформация'
            ],
            'Культура': [
                'фестиваль', 'выставка', 'премьера фильма', 'литературная премия', 'музыкальный концерт',
                'театр', 'опера', 'балет', 'художественная галерея', 'музей', 'кинофестиваль', 'культурное наследие',
                'искусство', 'скульптура', 'живопись', 'графика', 'фотография', 'архитектура', 'дизайн',
                'мода', 'литература', 'поэзия', 'проза', 'драматургия', 'культурный проект', 'критика',
                'культурная политика',
                'фольклор', 'этнография', 'культурное разнообразие', 'культурные инициативы', 'культурное образование'
            ],
            'Здоровье': [
                'вакцинация', 'эпидемия', 'Минздрав', 'здравоохранение', 'медицинское обследование', 'лечение',
                'хирургия', 'диагностика', 'профилактика', 'реабилитация', 'пациент', 'врач', 'медсестра',
                'аптека', 'фармацевтика', 'медицинское страхование', 'психологическое здоровье', 'физиотерапия',
                'оздоровление', 'фитнес', 'здоровый образ жизни', 'питание', 'диета', 'витамины', 'иммунитет',
                'онкология', 'кардиология', 'эндокринология', 'педиатрия', 'гериатрия', 'неврология', 'психиатрия',
                'стоматология', 'ортопедия', 'гинекология', 'анестезиология'
            ],
            'Образование': [
                'ЕГЭ', 'приемная кампания', 'новая учебная программа', 'научная конференция',
                'образовательный стандарт',
                'дистанционное обучение', 'онлайн-курсы', 'высшее образование', 'среднее образование',
                'дошкольное образование',
                'профессиональное обучение', 'стипендия', 'студент', 'преподаватель', 'школа', 'университет',
                'колледж', 'академия', 'институт', 'семинар', 'мастер-класс', 'обучающий модуль', 'учебник',
                'научная степень', 'аспирантура', 'диссертация', 'защита квалификационной работы',
                'академический отпуск',
                'научно-исследовательская работа', 'научная публикация', 'научный журнал', 'образовательный проект',
                'курс повышения квалификации', 'лицензирование образовательной деятельности', 'образовательный грант',
                'международное образовательное сотрудничество', 'языковые курсы', 'образовательная программа'
            ]
        }

    def get_interest_keywords(self):
        # Example: Return a list of keywords that represent user interests
        return ['Спорт', 'Политика', 'СВО', 'Экономика', 'Наука', 'Технологии', 'Культура', 'Здоровье', 'Образование']

    def preprocess_text(self, text):
        # Удаление URL, символов и приведение к нижнему регистру
        text = re.sub(r'http\S+', '', text)
        text = re.sub(r'[^а-яА-Яa-zA-Z0-9\s]', '', text)
        text = text.lower()
        return text.strip()

    def remove_duplicates(self, messages):
        unique_messages = []
        text_messages = [msg for msg in messages if msg.text]
        text_indices = [i for i, msg in enumerate(messages) if msg.text]

        embeddings = self.model.encode([self.preprocess_text(msg.text) for msg in text_messages],
                                       show_progress_bar=False)
        cosine_scores = util.pytorch_cos_sim(embeddings, embeddings)

        threshold = 0.97
        is_duplicate = np.zeros(len(text_messages), dtype=bool)

        for i in range(len(text_messages)):
            if not is_duplicate[i]:
                duplicate_indices = np.where(cosine_scores[i] > threshold)[0]
                is_duplicate[duplicate_indices] = True
                unique_messages.append(messages[text_indices[i]])
                is_duplicate[i] = False

        return unique_messages

    def filter_messages_by_interest(self, messages, interests):
        filtered_messages = []
        prev_message_content = ""

        for msg in messages:
            if msg.text:
                message_content = msg.text.lower()
                message_lines = message_content.split('\n')
                message_title = message_lines[0] if message_lines else ''
                added_to_filtered = False  # Флаг для проверки, было ли сообщение уже добавлено

                if prev_message_content and message_content in prev_message_content:
                    print(f"Message skipped (duplicate): {msg.id}")  # Логируем причину пропуска сообщения
                    continue

                for interest in interests:
                    keywords = self.interest_keywords.get(interest, [])
                    pattern = r'\b(' + '|'.join(re.escape(word) for word in keywords) + r')\b'
                    if re.search(pattern, message_title) or re.search(pattern, message_content):
                        if not added_to_filtered:
                            filtered_messages.append(msg)
                            added_to_filtered = True  # Помечаем, что сообщение добавлено
                            print(f"Message filtered by keyword '{pattern}': {msg.text}")  # Логируем для отладки
                        prev_message_content = message_content

        return filtered_messages


